{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task\n",
    "* **Take a Data set from github and apply linear regression with one variable and multiple varibales**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODELYEAR</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>VEHICLECLASS</th>\n",
       "      <th>ENGINESIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>TRANSMISSION</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>FUELCONSUMPTION_CITY</th>\n",
       "      <th>FUELCONSUMPTION_HWY</th>\n",
       "      <th>FUELCONSUMPTION_COMB</th>\n",
       "      <th>FUELCONSUMPTION_COMB_MPG</th>\n",
       "      <th>CO2EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS5</td>\n",
       "      <td>Z</td>\n",
       "      <td>9.9</td>\n",
       "      <td>6.7</td>\n",
       "      <td>8.5</td>\n",
       "      <td>33</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4</td>\n",
       "      <td>M6</td>\n",
       "      <td>Z</td>\n",
       "      <td>11.2</td>\n",
       "      <td>7.7</td>\n",
       "      <td>9.6</td>\n",
       "      <td>29</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX HYBRID</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.5</td>\n",
       "      <td>4</td>\n",
       "      <td>AV7</td>\n",
       "      <td>Z</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>5.9</td>\n",
       "      <td>48</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>MDX 4WD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.7</td>\n",
       "      <td>9.1</td>\n",
       "      <td>11.1</td>\n",
       "      <td>25</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>RDX AWD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.1</td>\n",
       "      <td>8.7</td>\n",
       "      <td>10.6</td>\n",
       "      <td>27</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MODELYEAR   MAKE       MODEL VEHICLECLASS  ENGINESIZE  CYLINDERS  \\\n",
       "0       2014  ACURA         ILX      COMPACT         2.0          4   \n",
       "1       2014  ACURA         ILX      COMPACT         2.4          4   \n",
       "2       2014  ACURA  ILX HYBRID      COMPACT         1.5          4   \n",
       "3       2014  ACURA     MDX 4WD  SUV - SMALL         3.5          6   \n",
       "4       2014  ACURA     RDX AWD  SUV - SMALL         3.5          6   \n",
       "\n",
       "  TRANSMISSION FUELTYPE  FUELCONSUMPTION_CITY  FUELCONSUMPTION_HWY  \\\n",
       "0          AS5        Z                   9.9                  6.7   \n",
       "1           M6        Z                  11.2                  7.7   \n",
       "2          AV7        Z                   6.0                  5.8   \n",
       "3          AS6        Z                  12.7                  9.1   \n",
       "4          AS6        Z                  12.1                  8.7   \n",
       "\n",
       "   FUELCONSUMPTION_COMB  FUELCONSUMPTION_COMB_MPG  CO2EMISSIONS  \n",
       "0                   8.5                        33           196  \n",
       "1                   9.6                        29           221  \n",
       "2                   5.9                        48           136  \n",
       "3                  11.1                        25           255  \n",
       "4                  10.6                        27           244  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"https://raw.githubusercontent.com/AP-Skill-Development-Corporation/DataScienceUsingPython-Internship-SRM-University/main/Datasets/Datasets-master/Regression/FuelConsumptionCo2.csv\")\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MODELYEAR                   0\n",
       "MAKE                        0\n",
       "MODEL                       0\n",
       "VEHICLECLASS                0\n",
       "ENGINESIZE                  0\n",
       "CYLINDERS                   0\n",
       "TRANSMISSION                0\n",
       "FUELTYPE                    0\n",
       "FUELCONSUMPTION_CITY        0\n",
       "FUELCONSUMPTION_HWY         0\n",
       "FUELCONSUMPTION_COMB        0\n",
       "FUELCONSUMPTION_COMB_MPG    0\n",
       "CO2EMISSIONS                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1067, 13)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df[\"ENGINESIZE\"],df[\"FUELCONSUMPTION_HWY\"])\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Annual Salary\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Fuel consumption on highway based on the Engine size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression With one Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ENGINESIZE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ENGINESIZE\n",
       "0         2.0\n",
       "1         2.4\n",
       "2         1.5\n",
       "3         3.5\n",
       "4         3.5"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[[\"ENGINESIZE\"]] \n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FUELCONSUMPTION_HWY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FUELCONSUMPTION_HWY\n",
       "0                  6.7\n",
       "1                  7.7\n",
       "2                  5.8\n",
       "3                  9.1\n",
       "4                  8.7"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = df[[\"FUELCONSUMPTION_HWY\"]] \n",
    "Y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.4053582 ],\n",
       "       [8.02015327],\n",
       "       [6.63686436],\n",
       "       ...,\n",
       "       [8.94234588],\n",
       "       [9.24974341],\n",
       "       [9.24974341]])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_values = model.predict(X)\n",
    "pred_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape of x_test:  (214, 1)\n",
      "shape of x_train:  (853, 1)\n",
      "shape of y_test:  (214, 1)\n",
      "shape of y_train:  (853, 1)\n"
     ]
    }
   ],
   "source": [
    "print(\"shape of x_test: \",X_test.shape)\n",
    "print(\"shape of x_train: \",X_train.shape)\n",
    "print(\"shape of y_test: \",Y_test.shape)\n",
    "print(\"shape of y_train: \",Y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0705041660992385"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "error = mean_squared_error(Y,pred_values)\n",
    "error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score of the model is  60.6445004152167 %\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "print(\"Accuracy score of the model is \" ,r2_score(Y,pred_values) * 100,\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df[\"ENGINESIZE\"],df[\"FUELCONSUMPTION_HWY\"])\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Annual Salary\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression With Multiple Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODELYEAR</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>VEHICLECLASS</th>\n",
       "      <th>ENGINESIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>TRANSMISSION</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>FUELCONSUMPTION_CITY</th>\n",
       "      <th>FUELCONSUMPTION_HWY</th>\n",
       "      <th>FUELCONSUMPTION_COMB</th>\n",
       "      <th>FUELCONSUMPTION_COMB_MPG</th>\n",
       "      <th>CO2EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS5</td>\n",
       "      <td>Z</td>\n",
       "      <td>9.9</td>\n",
       "      <td>6.7</td>\n",
       "      <td>8.5</td>\n",
       "      <td>33</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4</td>\n",
       "      <td>M6</td>\n",
       "      <td>Z</td>\n",
       "      <td>11.2</td>\n",
       "      <td>7.7</td>\n",
       "      <td>9.6</td>\n",
       "      <td>29</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX HYBRID</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.5</td>\n",
       "      <td>4</td>\n",
       "      <td>AV7</td>\n",
       "      <td>Z</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>5.9</td>\n",
       "      <td>48</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>MDX 4WD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.7</td>\n",
       "      <td>9.1</td>\n",
       "      <td>11.1</td>\n",
       "      <td>25</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>RDX AWD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.1</td>\n",
       "      <td>8.7</td>\n",
       "      <td>10.6</td>\n",
       "      <td>27</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MODELYEAR   MAKE       MODEL VEHICLECLASS  ENGINESIZE  CYLINDERS  \\\n",
       "0       2014  ACURA         ILX      COMPACT         2.0          4   \n",
       "1       2014  ACURA         ILX      COMPACT         2.4          4   \n",
       "2       2014  ACURA  ILX HYBRID      COMPACT         1.5          4   \n",
       "3       2014  ACURA     MDX 4WD  SUV - SMALL         3.5          6   \n",
       "4       2014  ACURA     RDX AWD  SUV - SMALL         3.5          6   \n",
       "\n",
       "  TRANSMISSION FUELTYPE  FUELCONSUMPTION_CITY  FUELCONSUMPTION_HWY  \\\n",
       "0          AS5        Z                   9.9                  6.7   \n",
       "1           M6        Z                  11.2                  7.7   \n",
       "2          AV7        Z                   6.0                  5.8   \n",
       "3          AS6        Z                  12.7                  9.1   \n",
       "4          AS6        Z                  12.1                  8.7   \n",
       "\n",
       "   FUELCONSUMPTION_COMB  FUELCONSUMPTION_COMB_MPG  CO2EMISSIONS  \n",
       "0                   8.5                        33           196  \n",
       "1                   9.6                        29           221  \n",
       "2                   5.9                        48           136  \n",
       "3                  11.1                        25           255  \n",
       "4                  10.6                        27           244  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"https://raw.githubusercontent.com/AP-Skill-Development-Corporation/DataScienceUsingPython-Internship-SRM-University/main/Datasets/Datasets-master/Regression/FuelConsumptionCo2.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1067, 13)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MODELYEAR                   0\n",
       "MAKE                        0\n",
       "MODEL                       0\n",
       "VEHICLECLASS                0\n",
       "ENGINESIZE                  0\n",
       "CYLINDERS                   0\n",
       "TRANSMISSION                0\n",
       "FUELTYPE                    0\n",
       "FUELCONSUMPTION_CITY        0\n",
       "FUELCONSUMPTION_HWY         0\n",
       "FUELCONSUMPTION_COMB        0\n",
       "FUELCONSUMPTION_COMB_MPG    0\n",
       "CO2EMISSIONS                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape of X_test:  (214, 1)\n",
      "shape of X_train:  (853, 1)\n",
      "shape of Y_test:  (214, 1)\n",
      "shape of Y_train:  (853, 1)\n"
     ]
    }
   ],
   "source": [
    "print(\"shape of X_test: \",X_test.shape)\n",
    "print(\"shape of X_train: \",X_train.shape)\n",
    "print(\"shape of Y_test: \",Y_test.shape)\n",
    "print(\"shape of Y_train: \",Y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=LinearRegression()\n",
    "model.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 8.95764595],\n",
       "       [ 6.49065953],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [11.42463236],\n",
       "       [ 8.95764595],\n",
       "       [ 7.41577943],\n",
       "       [ 7.10740613],\n",
       "       [ 8.95764595],\n",
       "       [ 8.03252604],\n",
       "       [ 8.03252604],\n",
       "       [ 8.95764595],\n",
       "       [ 8.03252604],\n",
       "       [12.34975227],\n",
       "       [ 8.18671269],\n",
       "       [ 8.18671269],\n",
       "       [ 6.79903283],\n",
       "       [11.11625906],\n",
       "       [ 9.7285792 ],\n",
       "       [ 8.03252604],\n",
       "       [13.58324548],\n",
       "       [ 8.18671269],\n",
       "       [10.0369525 ],\n",
       "       [ 9.7285792 ],\n",
       "       [10.0369525 ],\n",
       "       [ 8.95764595],\n",
       "       [ 6.18228622],\n",
       "       [12.81231222],\n",
       "       [ 6.79903283],\n",
       "       [ 7.41577943],\n",
       "       [ 8.95764595],\n",
       "       [12.34975227],\n",
       "       [ 9.7285792 ],\n",
       "       [12.50393892],\n",
       "       [10.49951246],\n",
       "       [12.50393892],\n",
       "       [13.89161878],\n",
       "       [ 6.64484618],\n",
       "       [10.80788576],\n",
       "       [ 9.4202059 ],\n",
       "       [ 8.95764595],\n",
       "       [14.04580543],\n",
       "       [ 7.41577943],\n",
       "       [ 9.88276585],\n",
       "       [10.0369525 ],\n",
       "       [ 7.41577943],\n",
       "       [ 6.49065953],\n",
       "       [ 6.49065953],\n",
       "       [ 7.41577943],\n",
       "       [ 9.57439255],\n",
       "       [ 6.79903283],\n",
       "       [13.12068553],\n",
       "       [10.96207241],\n",
       "       [13.89161878],\n",
       "       [ 7.41577943],\n",
       "       [10.0369525 ],\n",
       "       [ 8.18671269],\n",
       "       [12.04137897],\n",
       "       [10.0369525 ],\n",
       "       [ 6.79903283],\n",
       "       [ 8.03252604],\n",
       "       [ 8.49508599],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [ 7.10740613],\n",
       "       [10.0369525 ],\n",
       "       [ 9.88276585],\n",
       "       [ 7.41577943],\n",
       "       [ 6.79903283],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [ 9.88276585],\n",
       "       [ 9.7285792 ],\n",
       "       [12.04137897],\n",
       "       [13.89161878],\n",
       "       [ 7.41577943],\n",
       "       [13.89161878],\n",
       "       [ 7.41577943],\n",
       "       [10.0369525 ],\n",
       "       [13.89161878],\n",
       "       [ 6.49065953],\n",
       "       [13.12068553],\n",
       "       [12.04137897],\n",
       "       [ 7.41577943],\n",
       "       [13.89161878],\n",
       "       [10.19113915],\n",
       "       [ 9.7285792 ],\n",
       "       [ 7.41577943],\n",
       "       [ 9.88276585],\n",
       "       [12.50393892],\n",
       "       [11.11625906],\n",
       "       [ 7.41577943],\n",
       "       [ 9.7285792 ],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [12.50393892],\n",
       "       [14.66255204],\n",
       "       [ 7.41577943],\n",
       "       [10.49951246],\n",
       "       [ 8.03252604],\n",
       "       [13.89161878],\n",
       "       [ 7.41577943],\n",
       "       [ 9.7285792 ],\n",
       "       [ 6.79903283],\n",
       "       [11.11625906],\n",
       "       [ 7.10740613],\n",
       "       [12.50393892],\n",
       "       [ 7.10740613],\n",
       "       [ 7.41577943],\n",
       "       [ 8.03252604],\n",
       "       [13.89161878],\n",
       "       [12.81231222],\n",
       "       [11.11625906],\n",
       "       [12.50393892],\n",
       "       [ 9.7285792 ],\n",
       "       [ 8.18671269],\n",
       "       [ 8.18671269],\n",
       "       [12.04137897],\n",
       "       [ 7.41577943],\n",
       "       [10.19113915],\n",
       "       [10.96207241],\n",
       "       [ 7.41577943],\n",
       "       [10.0369525 ],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [13.12068553],\n",
       "       [13.12068553],\n",
       "       [11.57881901],\n",
       "       [ 7.41577943],\n",
       "       [ 8.03252604],\n",
       "       [ 6.79903283],\n",
       "       [ 9.88276585],\n",
       "       [ 9.88276585],\n",
       "       [12.50393892],\n",
       "       [11.57881901],\n",
       "       [12.04137897],\n",
       "       [ 6.79903283],\n",
       "       [12.50393892],\n",
       "       [ 8.03252604],\n",
       "       [ 6.49065953],\n",
       "       [ 7.41577943],\n",
       "       [ 7.41577943],\n",
       "       [ 6.18228622],\n",
       "       [11.57881901],\n",
       "       [ 7.41577943],\n",
       "       [12.04137897],\n",
       "       [12.65812557],\n",
       "       [12.50393892],\n",
       "       [ 9.88276585],\n",
       "       [ 7.41577943],\n",
       "       [ 8.95764595],\n",
       "       [13.42905883],\n",
       "       [12.96649887],\n",
       "       [ 9.7285792 ],\n",
       "       [ 8.18671269],\n",
       "       [ 9.7285792 ],\n",
       "       [13.89161878],\n",
       "       [ 7.10740613],\n",
       "       [ 7.41577943],\n",
       "       [ 6.79903283],\n",
       "       [ 9.88276585],\n",
       "       [10.49951246],\n",
       "       [ 6.49065953],\n",
       "       [ 8.95764595],\n",
       "       [13.12068553],\n",
       "       [ 7.41577943],\n",
       "       [ 9.7285792 ],\n",
       "       [13.12068553],\n",
       "       [ 9.7285792 ],\n",
       "       [10.0369525 ],\n",
       "       [11.57881901],\n",
       "       [10.49951246],\n",
       "       [ 6.79903283],\n",
       "       [12.04137897],\n",
       "       [ 8.95764595],\n",
       "       [13.89161878],\n",
       "       [ 9.57439255],\n",
       "       [ 6.64484618],\n",
       "       [13.58324548],\n",
       "       [10.49951246],\n",
       "       [12.50393892],\n",
       "       [ 8.95764595],\n",
       "       [ 6.49065953],\n",
       "       [ 9.7285792 ],\n",
       "       [ 9.7285792 ],\n",
       "       [ 8.03252604],\n",
       "       [ 9.7285792 ],\n",
       "       [ 9.7285792 ],\n",
       "       [ 6.49065953],\n",
       "       [ 7.41577943],\n",
       "       [ 6.79903283],\n",
       "       [ 8.03252604],\n",
       "       [13.58324548],\n",
       "       [11.11625906],\n",
       "       [ 9.88276585],\n",
       "       [ 9.7285792 ],\n",
       "       [ 9.57439255],\n",
       "       [13.12068553],\n",
       "       [11.11625906],\n",
       "       [ 9.7285792 ],\n",
       "       [10.19113915],\n",
       "       [ 9.7285792 ],\n",
       "       [ 9.88276585],\n",
       "       [ 9.88276585],\n",
       "       [ 7.41577943],\n",
       "       [ 6.79903283],\n",
       "       [10.19113915],\n",
       "       [ 8.03252604],\n",
       "       [ 9.88276585],\n",
       "       [ 6.79903283],\n",
       "       [10.19113915],\n",
       "       [10.0369525 ],\n",
       "       [ 7.41577943]])"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_pred  = model.predict(X_test)\n",
    "Y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of actual and predicted is  61.14471554909452\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy of actual and predicted is \",r2_score(Y_test,Y_pred) *100)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
